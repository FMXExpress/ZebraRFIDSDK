//
// Generated by JavaToPas v1.5 20170214 - 172223
////////////////////////////////////////////////////////////////////////////////
unit com.zebra.rfid.api3.bm;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes;

type
  Jbm = interface;

  JbmClass = interface(JObjectClass)
    ['{F9E2B948-4765-4FA9-BE3A-F8010CAB106C}']
    function _GetA : Integer; cdecl; overload;                                  //  A: $1
    function _GetB : Integer; cdecl; overload;                                  //  A: $1
    function _GetC : Integer; cdecl; overload;                                  //  A: $1
    function _Geta : Integer; cdecl; overload;                                  //  A: $1
    function _Getb : Integer; cdecl; overload;                                  //  A: $1
    function _Getc : Integer; cdecl; overload;                                  //  A: $1
    function _Getd : Integer; cdecl;                                            //  A: $1
    function _Gete : Integer; cdecl;                                            //  A: $1
    function _Getf : Integer; cdecl;                                            //  A: $1
    function _Getg : Integer; cdecl;                                            //  A: $1
    function _Geth : Integer; cdecl;                                            //  A: $1
    function _Geti : Integer; cdecl;                                            //  A: $1
    function _Getj : Integer; cdecl;                                            //  A: $1
    function _Getk : Integer; cdecl;                                            //  A: $1
    function _Getl : Integer; cdecl;                                            //  A: $1
    function _Getm : Integer; cdecl;                                            //  A: $1
    function _Getn : Integer; cdecl;                                            //  A: $1
    function _Geto : Integer; cdecl;                                            //  A: $1
    function _Getp : Integer; cdecl;                                            //  A: $1
    function _Getq : Integer; cdecl;                                            //  A: $1
    function _Getr : Integer; cdecl;                                            //  A: $1
    function _Gets : Integer; cdecl;                                            //  A: $1
    function _Gett : Integer; cdecl;                                            //  A: $1
    function _Getu : Integer; cdecl;                                            //  A: $1
    function _Getv : Integer; cdecl;                                            //  A: $1
    function _Getw : Integer; cdecl;                                            //  A: $1
    function _Getx : Integer; cdecl;                                            //  A: $1
    function _Gety : Integer; cdecl;                                            //  A: $1
    function _Getz : Integer; cdecl;                                            //  A: $1
    procedure _SetA(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _SetB(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _SetC(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Seta(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Setb(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Setc(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Setd(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sete(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setf(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setg(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Seth(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Seti(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setj(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setk(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setl(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setm(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setn(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Seto(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setp(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setq(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setr(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sets(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sett(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setu(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setv(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setw(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setx(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sety(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setz(Value : Integer) ; cdecl;                                   //  A: $1
    property A : Integer read _GetA write _SetA;                                // I A: $1
    property B : Integer read _GetB write _SetB;                                // I A: $1
    property C : Integer read _GetC write _SetC;                                // I A: $1
    property a : Integer read _Geta write _Seta;                                // I A: $1
    property b : Integer read _Getb write _Setb;                                // I A: $1
    property c : Integer read _Getc write _Setc;                                // I A: $1
    property d : Integer read _Getd write _Setd;                                // I A: $1
    property e : Integer read _Gete write _Sete;                                // I A: $1
    property f : Integer read _Getf write _Setf;                                // I A: $1
    property g : Integer read _Getg write _Setg;                                // I A: $1
    property h : Integer read _Geth write _Seth;                                // I A: $1
    property i : Integer read _Geti write _Seti;                                // I A: $1
    property j : Integer read _Getj write _Setj;                                // I A: $1
    property k : Integer read _Getk write _Setk;                                // I A: $1
    property l : Integer read _Getl write _Setl;                                // I A: $1
    property m : Integer read _Getm write _Setm;                                // I A: $1
    property n : Integer read _Getn write _Setn;                                // I A: $1
    property o : Integer read _Geto write _Seto;                                // I A: $1
    property p : Integer read _Getp write _Setp;                                // I A: $1
    property q : Integer read _Getq write _Setq;                                // I A: $1
    property r : Integer read _Getr write _Setr;                                // I A: $1
    property s : Integer read _Gets write _Sets;                                // I A: $1
    property t : Integer read _Gett write _Sett;                                // I A: $1
    property u : Integer read _Getu write _Setu;                                // I A: $1
    property v : Integer read _Getv write _Setv;                                // I A: $1
    property w : Integer read _Getw write _Setw;                                // I A: $1
    property x : Integer read _Getx write _Setx;                                // I A: $1
    property y : Integer read _Gety write _Sety;                                // I A: $1
    property z : Integer read _Getz write _Setz;                                // I A: $1
  end;

  [JavaSignature('com/zebra/rfid/api3/bm')]
  Jbm = interface(JObject)
    ['{0FD4CB80-866F-45FF-8204-E1BD1DF5ECD4}']
    function _GetA : Integer; cdecl; overload;                                  //  A: $1
    function _GetB : Integer; cdecl; overload;                                  //  A: $1
    function _GetC : Integer; cdecl; overload;                                  //  A: $1
    function _Geta : Integer; cdecl; overload;                                  //  A: $1
    function _Getb : Integer; cdecl; overload;                                  //  A: $1
    function _Getc : Integer; cdecl; overload;                                  //  A: $1
    function _Getd : Integer; cdecl;                                            //  A: $1
    function _Gete : Integer; cdecl;                                            //  A: $1
    function _Getf : Integer; cdecl;                                            //  A: $1
    function _Getg : Integer; cdecl;                                            //  A: $1
    function _Geth : Integer; cdecl;                                            //  A: $1
    function _Geti : Integer; cdecl;                                            //  A: $1
    function _Getj : Integer; cdecl;                                            //  A: $1
    function _Getk : Integer; cdecl;                                            //  A: $1
    function _Getl : Integer; cdecl;                                            //  A: $1
    function _Getm : Integer; cdecl;                                            //  A: $1
    function _Getn : Integer; cdecl;                                            //  A: $1
    function _Geto : Integer; cdecl;                                            //  A: $1
    function _Getp : Integer; cdecl;                                            //  A: $1
    function _Getq : Integer; cdecl;                                            //  A: $1
    function _Getr : Integer; cdecl;                                            //  A: $1
    function _Gets : Integer; cdecl;                                            //  A: $1
    function _Gett : Integer; cdecl;                                            //  A: $1
    function _Getu : Integer; cdecl;                                            //  A: $1
    function _Getv : Integer; cdecl;                                            //  A: $1
    function _Getw : Integer; cdecl;                                            //  A: $1
    function _Getx : Integer; cdecl;                                            //  A: $1
    function _Gety : Integer; cdecl;                                            //  A: $1
    function _Getz : Integer; cdecl;                                            //  A: $1
    procedure _SetA(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _SetB(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _SetC(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Seta(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Setb(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Setc(Value : Integer) ; cdecl; overload;                         //  A: $1
    procedure _Setd(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sete(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setf(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setg(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Seth(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Seti(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setj(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setk(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setl(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setm(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setn(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Seto(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setp(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setq(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setr(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sets(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sett(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setu(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setv(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setw(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setx(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Sety(Value : Integer) ; cdecl;                                   //  A: $1
    procedure _Setz(Value : Integer) ; cdecl;                                   //  A: $1
    property A : Integer read _GetA write _SetA;                                // I A: $1
    property B : Integer read _GetB write _SetB;                                // I A: $1
    property C : Integer read _GetC write _SetC;                                // I A: $1
    property a : Integer read _Geta write _Seta;                                // I A: $1
    property b : Integer read _Getb write _Setb;                                // I A: $1
    property c : Integer read _Getc write _Setc;                                // I A: $1
    property d : Integer read _Getd write _Setd;                                // I A: $1
    property e : Integer read _Gete write _Sete;                                // I A: $1
    property f : Integer read _Getf write _Setf;                                // I A: $1
    property g : Integer read _Getg write _Setg;                                // I A: $1
    property h : Integer read _Geth write _Seth;                                // I A: $1
    property i : Integer read _Geti write _Seti;                                // I A: $1
    property j : Integer read _Getj write _Setj;                                // I A: $1
    property k : Integer read _Getk write _Setk;                                // I A: $1
    property l : Integer read _Getl write _Setl;                                // I A: $1
    property m : Integer read _Getm write _Setm;                                // I A: $1
    property n : Integer read _Getn write _Setn;                                // I A: $1
    property o : Integer read _Geto write _Seto;                                // I A: $1
    property p : Integer read _Getp write _Setp;                                // I A: $1
    property q : Integer read _Getq write _Setq;                                // I A: $1
    property r : Integer read _Getr write _Setr;                                // I A: $1
    property s : Integer read _Gets write _Sets;                                // I A: $1
    property t : Integer read _Gett write _Sett;                                // I A: $1
    property u : Integer read _Getu write _Setu;                                // I A: $1
    property v : Integer read _Getv write _Setv;                                // I A: $1
    property w : Integer read _Getw write _Setw;                                // I A: $1
    property x : Integer read _Getx write _Setx;                                // I A: $1
    property y : Integer read _Gety write _Sety;                                // I A: $1
    property z : Integer read _Getz write _Setz;                                // I A: $1
  end;

  TJbm = class(TJavaGenericImport<JbmClass, Jbm>)
  end;

implementation

end.
