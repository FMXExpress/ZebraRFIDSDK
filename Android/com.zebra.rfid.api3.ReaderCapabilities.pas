//
// Generated by JavaToPas v1.5 20170214 - 172223
////////////////////////////////////////////////////////////////////////////////
unit com.zebra.rfid.api3.ReaderCapabilities;

interface

uses
  AndroidAPI.JNIBridge,
  Androidapi.JNI.JavaTypes,
  com.zebra.rfid.api3.SupportedRegions,
  com.zebra.rfid.api3.RFModes,
  com.zebra.rfid.api3.FrequencyHopInfo,
  com.zebra.rfid.api3.COMMUNICATION_STANDARD,
  com.zebra.rfid.api3.PerAntennaReceiveSensitivityRange,
  com.zebra.rfid.api3.READER_ID_TYPE;

type
  JReaderCapabilities_ReaderIdentification = interface; // merged
  JReaderCapabilities = interface;

  JReaderCapabilitiesClass = interface(JObjectClass)
    ['{1F087081-0DCE-4997-8CE7-4CDA644D1645}']
    function _GetFrequencyHopInfo : JFrequencyHopInfo; cdecl;                   //  A: $1
    function _GetRFModes : JRFModes; cdecl;                                     //  A: $1
    function _GetReaderID : JReaderCapabilities_ReaderIdentification; cdecl;    //  A: $1
    function _GetSupportedRegions : JSupportedRegions; cdecl;                   //  A: $1
    function getAirProtocolVersion : JString; cdecl;                            // ()Ljava/lang/String; A: $1
    function getAsciiVersion : JString; cdecl;                                  // ()Ljava/lang/String; A: $1
    function getBDAddress : JString; cdecl;                                     // ()Ljava/lang/String; A: $1
    function getCommunicationStandard : JCOMMUNICATION_STANDARD; cdecl;         // ()Lcom/zebra/rfid/api3/COMMUNICATION_STANDARD; A: $1
    function getCountryCode : Integer; cdecl;                                   // ()I A: $1
    function getDutyCycleValues : TJavaArray<SmallInt>; cdecl;                  // ()[S A: $1
    function getFirwareVersion : JString; cdecl;                                // ()Ljava/lang/String; A: $1
    function getFixedFreqValues : TJavaArray<Integer>; cdecl;                   // ()[I A: $1
    function getManufacturerName : JString; cdecl;                              // ()Ljava/lang/String; A: $1
    function getManufacturingDate : JString; cdecl;                             // ()Ljava/lang/String; A: $1
    function getMaxNumOperationsInAccessSequence : Integer; cdecl;              // ()I A: $1
    function getMaxNumPreFilters : Integer; cdecl;                              // ()I A: $1
    function getModelName : JString; cdecl;                                     // ()Ljava/lang/String; A: $1
    function getNumAntennaSupported : Integer; cdecl;                           // ()I A: $1
    function getNumGPIPorts : Integer; cdecl;                                   // ()I A: $1
    function getNumGPOPorts : Integer; cdecl;                                   // ()I A: $1
    function getReceiveSensitivityValues : TJavaArray<Integer>; cdecl;          // ()[I A: $1
    function getScannerName : JString; cdecl;                                   // ()Ljava/lang/String; A: $1
    function getSerialNumber : JString; cdecl;                                  // ()Ljava/lang/String; A: $1
    function getTransmitPowerLevelValues : TJavaArray<Integer>; cdecl;          // ()[I A: $1
    function isBlockEraseSupported : boolean; cdecl;                            // ()Z A: $1
    function isBlockPermalockSupported : boolean; cdecl;                        // ()Z A: $1
    function isBlockWriteSupported : boolean; cdecl;                            // ()Z A: $1
    function isHoppingEnabled : boolean; cdecl;                                 // ()Z A: $1
    function isNXPCommandSupported : boolean; cdecl;                            // ()Z A: $1
    function isRSSIFilterSupported : boolean; cdecl;                            // ()Z A: $1
    function isRadioPowerControlSupported : boolean; cdecl;                     // ()Z A: $1
    function isRecommisionSupported : boolean; cdecl;                           // ()Z A: $1
    function isTagEventReportingSupported : boolean; cdecl;                     // ()Z A: $1
    function isTagInventoryStateAwareSingulationSupported : boolean; cdecl;     // ()Z A: $1
    function isTagLocationingSupported : boolean; cdecl;                        // ()Z A: $1
    function isUTCClockSupported : boolean; cdecl;                              // ()Z A: $1
    function isWriteUMISupported : boolean; cdecl;                              // ()Z A: $1
    procedure _SetFrequencyHopInfo(Value : JFrequencyHopInfo) ; cdecl;          //  A: $1
    procedure _SetRFModes(Value : JRFModes) ; cdecl;                            //  A: $1
    procedure _SetReaderID(Value : JReaderCapabilities_ReaderIdentification) ; cdecl;//  A: $1
    procedure _SetSupportedRegions(Value : JSupportedRegions) ; cdecl;          //  A: $1
    procedure getReaderCaps ; cdecl;                                            // ()V A: $1
    procedure updateReaderCaps ; cdecl;                                         // ()V A: $1
    property FrequencyHopInfo : JFrequencyHopInfo read _GetFrequencyHopInfo write _SetFrequencyHopInfo;// Lcom/zebra/rfid/api3/FrequencyHopInfo; A: $1
    property RFModes : JRFModes read _GetRFModes write _SetRFModes;             // Lcom/zebra/rfid/api3/RFModes; A: $1
    property ReaderID : JReaderCapabilities_ReaderIdentification read _GetReaderID write _SetReaderID;// Lcom/zebra/rfid/api3/ReaderCapabilities$ReaderIdentification; A: $1
    property SupportedRegions : JSupportedRegions read _GetSupportedRegions write _SetSupportedRegions;// Lcom/zebra/rfid/api3/SupportedRegions; A: $1
  end;

  [JavaSignature('com/zebra/rfid/api3/ReaderCapabilities$ReaderIdentification')]
  JReaderCapabilities = interface(JObject)
    ['{88393C98-CC32-4A94-9C12-7576447E6106}']
    function _GetFrequencyHopInfo : JFrequencyHopInfo; cdecl;                   //  A: $1
    function _GetRFModes : JRFModes; cdecl;                                     //  A: $1
    function _GetReaderID : JReaderCapabilities_ReaderIdentification; cdecl;    //  A: $1
    function _GetSupportedRegions : JSupportedRegions; cdecl;                   //  A: $1
    function getAirProtocolVersion : JString; cdecl;                            // ()Ljava/lang/String; A: $1
    function getAsciiVersion : JString; cdecl;                                  // ()Ljava/lang/String; A: $1
    function getBDAddress : JString; cdecl;                                     // ()Ljava/lang/String; A: $1
    function getCommunicationStandard : JCOMMUNICATION_STANDARD; cdecl;         // ()Lcom/zebra/rfid/api3/COMMUNICATION_STANDARD; A: $1
    function getCountryCode : Integer; cdecl;                                   // ()I A: $1
    function getDutyCycleValues : TJavaArray<SmallInt>; cdecl;                  // ()[S A: $1
    function getFirwareVersion : JString; cdecl;                                // ()Ljava/lang/String; A: $1
    function getFixedFreqValues : TJavaArray<Integer>; cdecl;                   // ()[I A: $1
    function getManufacturerName : JString; cdecl;                              // ()Ljava/lang/String; A: $1
    function getManufacturingDate : JString; cdecl;                             // ()Ljava/lang/String; A: $1
    function getMaxNumOperationsInAccessSequence : Integer; cdecl;              // ()I A: $1
    function getMaxNumPreFilters : Integer; cdecl;                              // ()I A: $1
    function getModelName : JString; cdecl;                                     // ()Ljava/lang/String; A: $1
    function getNumAntennaSupported : Integer; cdecl;                           // ()I A: $1
    function getNumGPIPorts : Integer; cdecl;                                   // ()I A: $1
    function getNumGPOPorts : Integer; cdecl;                                   // ()I A: $1
    function getReceiveSensitivityValues : TJavaArray<Integer>; cdecl;          // ()[I A: $1
    function getScannerName : JString; cdecl;                                   // ()Ljava/lang/String; A: $1
    function getSerialNumber : JString; cdecl;                                  // ()Ljava/lang/String; A: $1
    function getTransmitPowerLevelValues : TJavaArray<Integer>; cdecl;          // ()[I A: $1
    function isBlockEraseSupported : boolean; cdecl;                            // ()Z A: $1
    function isBlockPermalockSupported : boolean; cdecl;                        // ()Z A: $1
    function isBlockWriteSupported : boolean; cdecl;                            // ()Z A: $1
    function isHoppingEnabled : boolean; cdecl;                                 // ()Z A: $1
    function isNXPCommandSupported : boolean; cdecl;                            // ()Z A: $1
    function isRSSIFilterSupported : boolean; cdecl;                            // ()Z A: $1
    function isRadioPowerControlSupported : boolean; cdecl;                     // ()Z A: $1
    function isRecommisionSupported : boolean; cdecl;                           // ()Z A: $1
    function isTagEventReportingSupported : boolean; cdecl;                     // ()Z A: $1
    function isTagInventoryStateAwareSingulationSupported : boolean; cdecl;     // ()Z A: $1
    function isTagLocationingSupported : boolean; cdecl;                        // ()Z A: $1
    function isUTCClockSupported : boolean; cdecl;                              // ()Z A: $1
    function isWriteUMISupported : boolean; cdecl;                              // ()Z A: $1
    procedure _SetFrequencyHopInfo(Value : JFrequencyHopInfo) ; cdecl;          //  A: $1
    procedure _SetRFModes(Value : JRFModes) ; cdecl;                            //  A: $1
    procedure _SetReaderID(Value : JReaderCapabilities_ReaderIdentification) ; cdecl;//  A: $1
    procedure _SetSupportedRegions(Value : JSupportedRegions) ; cdecl;          //  A: $1
    procedure getReaderCaps ; cdecl;                                            // ()V A: $1
    procedure updateReaderCaps ; cdecl;                                         // ()V A: $1
    property FrequencyHopInfo : JFrequencyHopInfo read _GetFrequencyHopInfo write _SetFrequencyHopInfo;// Lcom/zebra/rfid/api3/FrequencyHopInfo; A: $1
    property RFModes : JRFModes read _GetRFModes write _SetRFModes;             // Lcom/zebra/rfid/api3/RFModes; A: $1
    property ReaderID : JReaderCapabilities_ReaderIdentification read _GetReaderID write _SetReaderID;// Lcom/zebra/rfid/api3/ReaderCapabilities$ReaderIdentification; A: $1
    property SupportedRegions : JSupportedRegions read _GetSupportedRegions write _SetSupportedRegions;// Lcom/zebra/rfid/api3/SupportedRegions; A: $1
  end;

  TJReaderCapabilities = class(TJavaGenericImport<JReaderCapabilitiesClass, JReaderCapabilities>)
  end;

  // Merged from: .\com.zebra.rfid.api3.ReaderCapabilities_ReaderIdentification.pas
  JReaderCapabilities_ReaderIdentificationClass = interface(JObjectClass)
    ['{51A016B6-2E56-4124-94D1-983265ED2C49}']
    function getID : JString; cdecl;                                            // ()Ljava/lang/String; A: $1
    function getReaderIDType : JREADER_ID_TYPE; cdecl;                          // ()Lcom/zebra/rfid/api3/READER_ID_TYPE; A: $1
  end;

  [JavaSignature('com/zebra/rfid/api3/ReaderCapabilities_ReaderIdentification')]
  JReaderCapabilities_ReaderIdentification = interface(JObject)
    ['{C3790539-FD24-440F-AD7E-9394CD859AFA}']
    function getID : JString; cdecl;                                            // ()Ljava/lang/String; A: $1
    function getReaderIDType : JREADER_ID_TYPE; cdecl;                          // ()Lcom/zebra/rfid/api3/READER_ID_TYPE; A: $1
  end;

  TJReaderCapabilities_ReaderIdentification = class(TJavaGenericImport<JReaderCapabilities_ReaderIdentificationClass, JReaderCapabilities_ReaderIdentification>)
  end;


implementation

end.
